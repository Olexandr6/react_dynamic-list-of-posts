{"version":3,"sources":["components/PostsList/PostsList.tsx","api/helpers.ts","api/comments.ts","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/users.ts","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPostId","onTogglePostDetails","className","console","log","length","map","post","isSelectedPost","id","userId","title","type","onClick","BASE_URL","request","url","options","a","fetch","response","ok","Error","status","statusText","json","getCommentsByPostId","postId","comments","filter","comment","deleteCommentById","commentId","method","createComment","headers","body","JSON","stringify","getPostsByUserId","getAllPost","getPostById","NewCommentForm","updateComments","useState","userName","setUserName","userEmail","setUserEmail","setComment","handleInputChange","event","target","name","value","handleSubmit","preventDefault","email","onSubmit","placeholder","onChange","PostDetails","setPost","setComments","isCommentsHidden","setIsCommentsHidden","postFromServer","loadComments","commentsFromServer","useEffect","loadPost","handleDeleteCommentButton","currentValue","role","getUsers","App","setPosts","users","setUsers","selectedUserId","setSelectedUserId","setSelectedPostId","Promise","all","allUsers","allPosts","usersWithPosts","user","find","userPosts","loadData","htmlFor","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9c65bb76.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[],\n  selectedPostId: number,\n  onTogglePostDetails: (postId: number) => void,\n}\n\nexport const PostsList: React.FC<Props> = ({ posts, selectedPostId, onTogglePostDetails }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n    {console.log('PostList', posts)}\n\n    <ul className=\"PostsList__list\">\n      {posts.length && posts.map((post: Post) => {\n        const isSelectedPost = post.id === selectedPostId;\n\n        return (\n          <li key={post.id} className=\"PostsList__item\">\n            <div>\n              <b>{`[User #${post.userId}]: `}</b>\n              {post.title}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => (isSelectedPost\n                ? onTogglePostDetails(0)\n                : onTogglePostDetails(post.id))}\n            >\n              {isSelectedPost ? 'Close' : 'Open'}\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function request(url: string, options?: RequestFormat) {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} ${response.statusText}`);\n  }\n\n  return response.json();\n}\n","import { request } from './helpers';\n\nexport async function getCommentsByPostId(postId: number): Promise<CommentFormat[]> {\n  const comments: CommentFormat[] = await request('/comments');\n\n  return comments.filter(comment => comment.postId === postId);\n}\n\nexport function deleteCommentById(commentId: number): Promise<CommentFormat> {\n  return request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function createComment(comment: Omit<CommentFormat, 'id'>): Promise<CommentFormat> {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n    },\n    body: JSON.stringify(comment),\n  });\n}\n","import { request } from './helpers';\n\nexport function getPostsByUserId(userId: number): Promise<Post[]> {\n  return request(`/posts?userId=${userId}`);\n}\n\nexport function getAllPost(): Promise<Post[]> {\n  return request('/posts');\n}\n\nexport function getPostById(postId: number): Promise<Post> {\n  return request(`/posts/${postId}`);\n}\n","/* eslint-disable no-console */\nimport React, { useState } from 'react';\nimport { createComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  postId: number,\n  updateComments: () => Promise<void>,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, updateComments }) => {\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [comment, setComment] = useState('');\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'userName':\n        setUserName(value);\n        break;\n      case 'userEmail':\n        setUserEmail(value);\n        break;\n      case 'comment':\n        setComment(value);\n        break;\n      default:\n        throw new Error(`Unknown input name: ${name}`);\n    }\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const createdComment = await createComment({\n      postId,\n      name: userName,\n      email: userEmail,\n      body: comment,\n    });\n\n    if (createdComment) {\n      updateComments();\n    }\n\n    setUserName('');\n    setUserEmail('');\n    setComment('');\n  };\n\n  console.log('User name:', userName);\n  console.log('User email:', userEmail);\n  console.log('Comment:', comment);\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"userName\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={userName}\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"userEmail\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={userEmail}\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"comment\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={comment}\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteCommentById, getCommentsByPostId } from '../../api/comments';\nimport { getPostById } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  postId: number,\n}\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [post, setPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<CommentFormat[]>([]);\n  const [isCommentsHidden, setIsCommentsHidden] = useState(false);\n\n  async function loadPost() {\n    const postFromServer = await getPostById(postId);\n\n    setPost(postFromServer);\n  }\n\n  const loadComments = async () => {\n    const commentsFromServer = await getCommentsByPostId(postId);\n\n    setComments(commentsFromServer);\n  };\n\n  useEffect(() => {\n    loadPost();\n    loadComments();\n  }, [postId]);\n\n  const handleDeleteCommentButton = async (commentId: number) => {\n    const deletedComment = await deleteCommentById(commentId);\n\n    if (deletedComment) {\n      loadComments();\n    }\n  };\n\n  return (\n    <>\n      {post\n        ? (\n          <div className=\"PostDetails\">\n            <h2>Post details:</h2>\n\n            <section className=\"PostDetails__post\">\n              <p>{post?.title}</p>\n            </section>\n\n            {comments.length\n              ? (\n                <section className=\"PostDetails__comments\">\n                  <button\n                    type=\"button\"\n                    className=\"button\"\n                    onClick={() => setIsCommentsHidden(currentValue => !currentValue)}\n                  >\n                    {isCommentsHidden\n                      ? 'Show comments'\n                      : 'Hide comments'}\n                  </button>\n\n                  <ul className=\"PostDetails__list\">\n                    {!isCommentsHidden && comments.map(comment => (\n                      <li key={comment.id} className=\"PostDetails__list-item\">\n                        <button\n                          type=\"button\"\n                          className=\"PostDetails__remove-button button\"\n                          onClick={() => handleDeleteCommentButton(comment.id)}\n                        >\n                          X\n                        </button>\n\n                        <p>{comment.body}</p>\n                      </li>\n                    ))}\n                  </ul>\n                </section>\n              )\n              : (\n                <h3>No comments yet</h3>\n              )}\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm\n                  postId={postId}\n                  updateComments={loadComments}\n                />\n              </div>\n            </section>\n          </div>\n        )\n        : (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            <h2>Post not found</h2>\n          </div>\n        )}\n    </>\n  );\n};\n","import { request } from './helpers';\n\nexport async function getUsers(): Promise<User[]> {\n  return request('/users/');\n}\n","/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getAllPost, getPostsByUserId } from './api/posts';\nimport { getUsers } from './api/users';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    async function loadData() {\n      if (!selectedUserId) {\n        const [allUsers, allPosts] = await Promise.all([\n          getUsers(),\n          getAllPost(),\n        ]);\n\n        const usersWithPosts = allUsers.filter((user: User) => allPosts\n          .find((post: Post) => post.userId === user.id));\n\n        console.log('UseEffect', usersWithPosts);\n        console.log('UseEffect', allPosts);\n\n        setPosts(allPosts);\n        setUsers(usersWithPosts);\n      } else {\n        const userPosts = await getPostsByUserId(selectedUserId);\n\n        setPosts(userPosts);\n      }\n    }\n\n    loadData();\n  }, [selectedUserId]);\n\n  const togglePostDetails = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectedUserId(Number(value));\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"selectedUser\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"selectedUser\"\n            value={selectedUserId}\n            onChange={handleSelectChange}\n          >\n            <option value=\"0\">All users</option>\n\n            {users.length && users.map((user: User) => (\n              <option key={user.id} value={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            onTogglePostDetails={togglePostDetails}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? <PostDetails postId={selectedPostId} />\n            : (\n              <div className=\"alert alert-primary\" role=\"alert\">\n                <h2>Select a post</h2>\n              </div>\n            )}\n\n        </div>\n      </main>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}